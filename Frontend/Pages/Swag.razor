@page "/Swag"

@inject IBotController botController
@inject IJSRuntime JSRuntime
@inject WApi api

@inject BagReader bagReader
@inject EquipmentReader equipmentReader

@implements IDisposable

<BotHeader ShowActiveGoal="false" />

<Card class="mt-1">
    <CardHeader>
        Equipments
    </CardHeader>
    <CardBody>
        <div class="row p-0 m-0">
            @for (int index = 0; index <= (int)InventorySlotId.Bag_3; index++)
            {
                <div class="col">
                    <EquipmentComponent Slot="index"
                                        Item="equipmentReader.Items[index]"
                                        ShowIcon="!botController.IsBotActive" />
                </div>
            }
        </div>
    </CardBody>
</Card>

<Card class="mt-1">
    <CardHeader>
        <div class="d-flex">
            <div class="p-2 flex-grow-1 bd-highlight">
                Bag Contents
            </div>
            <div class="p-2 bd-highlight">
                <Money Value="TotalVendorMoney" />
            </div>
        </div>
    </CardHeader>

    <CardBody style="padding-bottom: 0">
        <table class="table table-sm table-striped table-no-border">
            <thead>
                <tr>
                    @for (int i = bagReader.Bags.Length - 1; i >= 0; i--)
                    {
                        var bag = bagReader.Bags[i];
                        <th>
                            <ItemComponent Item="bag.Item" />
                        </th>
                    }
                </tr>
            </thead>
            <tbody>
                @for (int slot = 0; slot <= bagReader.BagMaxSlot(); slot++)
                {
                    <tr>
                        @for (int bag = bagReader.Bags.Length - 1; bag >= 0; bag--)
                        {
                            <td width="20%">
                                @{
                                    var bagItem = bagReader.BagItems.FirstOrDefault(Exists);
                                    bool Exists(BagItem b) => b.Bag == bag && b.Slot == slot;
                                }
                                @if (bagItem != null)
                                {
                                    <ItemComponent Item="bagItem.Item"
                                                   Count="bagItem.Count"
                                                   LastCount="bagItem.LastCount"
                                                   LastChange="bagItem.LastChange"
                                                   LastUpdated="bagItem.LastUpdated" />
                                }
                            </td>
                        }
                    </tr>
                }
            </tbody>
        </table>
    </CardBody>
</Card>

<TalentTreeComponent />

<div id="tooltip" display="none" style="position: absolute; display: none;"></div>

@code {
    private Currency TotalVendorMoney { get; set; } = Currency.Empty;

    protected override void OnInitialized()
    {
        bagReader.DataChanged += OnBagReaderDataChanged;
        equipmentReader.OnEquipmentChanged += OnEquipmentChanged;
    }

    public void Dispose()
    {
        bagReader.DataChanged -= OnBagReaderDataChanged;
        equipmentReader.OnEquipmentChanged -= OnEquipmentChanged;
    }

    public void OnBagReaderDataChanged()
    {
        TotalVendorMoney = ItemPrice.ToSellPrice(bagReader.BagItems.Sum(s => s.Item.SellPrice * s.Count));
        base.InvokeAsync(StateHasChanged);
    }

    public void OnEquipmentChanged(object? s, (int, int) tuple)
    {
        base.InvokeAsync(StateHasChanged);
    }
}